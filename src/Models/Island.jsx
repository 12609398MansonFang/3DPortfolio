/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Skylar Muffin (https://sketchfab.com/boopdesignstudio)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/stylized-3d-floating-island-and-mine-house-3cb24182a8504d439ee4e3c500565ac5
Title: Stylized 3D Floating Island And Mine House
*/

import { React, useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three';

import { useRotation } from '../Components/RotationContext';
import Plane from './Plane';
import islandModel from '../Assets/GLB/Island.glb';


const Island = ({ isRotating, setIsRotating, currentFocusPoint, ...props}) => 
{
    const { nodes, materials } = useGLTF(islandModel);

    const islandRef = useRef();
    const { gl,viewport } = useThree();

    const canvasY = useRef(0);
    const canvasX = useRef(0);
    const canvasRotation = useRef(0);
    const damping = 0.95;

    const leftClickDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(true);

        const x = e.touches ? e.touches[0].x : e.x;
        const y = e.touches ? e.touches[0].y : e.y;
        //Written in ternary form, if statement form below, to allow for better explaination.

        // let x, y;
        // if (e.touches === true){
        //     x = e.touches[0].x;
        //     y = e.touches[0].y;
        // } else {
        //     canvasX.current = e.x;
        //     canvasY.current = e.y;
        // }

        canvasX.current = x;
        canvasY.current = y;


    } 

    const leftClickUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    }

    const leftClickMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating === true ){
            const x = e.touches ? e.touches[0].x : e.x;
            const y = e.touches ? e.touches[0].y : e.y;

            const dx = (x-canvasX.current)/viewport.width;
            const dy = (y-canvasY.current)/viewport.height;

            canvasX.current = x;
            canvasY.current = y;

            islandRef.current.rotation.x += dy * 0.01 * Math.PI;
            islandRef.current.rotation.y += dx * 0.01 * Math.PI;

            const rx = islandRef.current.rotation.x;
            const ry = islandRef.current.rotation.y;
            
            updateRotation([rx, ry, 0]);
        }

    }

    const arrowClickDown = (e) => {
        if(e.key === 'ArrowLeft'){
            if(!isRotating) 
                setIsRotating(true);
                islandRef.current.rotation.y += 0.01 * Math.PI;        
        } else if(e.key === 'ArrowRight'){
            if(!isRotating) 
                setIsRotating(true);
                islandRef.current.rotation.y -= 0.01 * Math.PI;
        }
    }

    const arrowClickUp = (e) => {
        if(e.key === 'ArrowLeft' || e.key == 'ArrowRight'){
            setIsRotating(false)
        }
    }

    useFrame(() => {
        if(isRotating === false ){
            canvasRotation.current = canvasRotation.current * damping;

            updateRotation([ islandRef.current.rotation.x, islandRef.current.rotation.y, 0 ]);
        
            if (Math.abs(canvasRotation.current) < 0.01){
                canvasRotation.current = 0;
            }

            islandRef.current.rotation.y += canvasRotation.current;
            islandRef.current.rotation.x += canvasRotation.current;
        
        }
    })

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', leftClickDown);
        canvas.addEventListener('pointerup', leftClickUp);
        canvas.addEventListener('pointermove', leftClickMove);
        document.addEventListener('keydown', arrowClickDown);
        document.addEventListener('keyup', arrowClickUp);

        return () => {
            canvas.removeEventListener('pointerdown', leftClickDown);
            canvas.removeEventListener('pointerup', leftClickUp);
            canvas.removeEventListener('pointermove', leftClickMove);
            document.removeEventListener('keydown', arrowClickDown);
            document.removeEventListener('keyup', arrowClickUp);

    }}, [gl, leftClickDown, leftClickUp, leftClickMove]);

    const { updateRotation } = useRotation();

    return (
        <a.group ref={islandRef} {...props}>
            <group position={[0.056, 0, 0.276]} rotation={[-Math.PI / 2, 0, 0]}>
                <group rotation={[Math.PI / 2, 0, 0]} scale={0.055}>
                    <group position={[-42.281, -1.801, 11.779]} rotation={[0, -0.185, 0]}>
                        <mesh
                        geometry={nodes.Final_Bridge1_Black_0.geometry}
                        material={materials.Black}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_Final_Rocks2_Mat_0.geometry}
                        material={materials.Final_Rocks2_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_Final_Water001_0.geometry}
                        material={materials["Final_Water.001"]}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Bridge_Mat001_0.geometry}
                        material={materials["SF_Bridge_Mat.001"]}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Bridge_Mat_0.geometry}
                        material={materials.SF_Bridge_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Bush_Mat_0.geometry}
                        material={materials.SF_Bush_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_ButterFly_Mat_0.geometry}
                        material={materials.SF_ButterFly_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Candle_Mat_0.geometry}
                        material={materials.SF_Candle_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Chimney_Mat_0.geometry}
                        material={materials.SF_Chimney_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_CutRock_Mat_0.geometry}
                        material={materials.SF_CutRock_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Door_Mat_0.geometry}
                        material={materials.SF_Door_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Grass_Mat_0.geometry}
                        material={materials.SF_Grass_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0.geometry}
                        material={materials.SF_GrassCards_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0001.geometry}
                        material={materials.SF_GrassCards_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0002.geometry}
                        material={materials.SF_GrassCards_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0003.geometry}
                        material={materials.SF_GrassCards_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_HouseJoins_Mat_0.geometry}
                        material={materials.SF_HouseJoins_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_HouseSupport_Mat_0.geometry}
                        material={materials.SF_HouseSupport_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Island_Mat_0.geometry}
                        material={materials.SF_Island_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Lamp_Mat_0.geometry}
                        material={materials.SF_Lamp_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_LampGlass_Mat_0.geometry}
                        material={materials.SF_LampGlass_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Lillypad_Mat_0.geometry}
                        material={materials.SF_Lillypad_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_MineCart_Mat_0.geometry}
                        material={materials.SF_MineCart_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_PlasterTex_Mat_0.geometry}
                        material={materials.SF_PlasterTex_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Rail_Mat_0.geometry}
                        material={materials.SF_Rail_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Rocks_Mat_0.geometry}
                        material={materials.SF_Rocks_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Roof_Final_0.geometry}
                        material={materials.SF_Roof_Final}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Roof_Final_0001.geometry}
                        material={materials.SF_Roof_Final}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Roof_Final_0002.geometry}
                        material={materials.SF_Roof_Final}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Roof_Final_0003.geometry}
                        material={materials.SF_Roof_Final}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Sack_Mat_0.geometry}
                        material={materials.SF_Sack_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Stalagmites_Mat_0.geometry}
                        material={materials.SF_Stalagmites_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_StoneBrick_Mat_0.geometry}
                        material={materials.SF_StoneBrick_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_TreeLeaf_Mat_0.geometry}
                        material={materials.SF_TreeLeaf_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_TreeWood_Mat_0.geometry}
                        material={materials.SF_TreeWood_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_TreeWood_Mat_0001.geometry}
                        material={materials.SF_TreeWood_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Water_Mat_0.geometry}
                        material={materials.SF_Water_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Windows_Mat_0.geometry}
                        material={materials.SF_Windows_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Windows_Mat_0001.geometry}
                        material={materials.SF_Windows_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_Windows_Mat_0002.geometry}
                        material={materials.SF_Windows_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        <mesh
                        geometry={nodes.Final_Bridge1_SF_WoodTex_Mat_0.geometry}
                        material={materials.SF_WoodTex_Mat}
                        position={[29.081, 1.801, -46.893]}
                        />
                        
                    </group>
                    
                </group>
                <Plane/>
            </group>
        </a.group>
    );
}

export default Island;